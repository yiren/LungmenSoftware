<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Npoi.Mapper</name>
    </assembly>
    <members>
        <member name="T:Npoi.Mapper.ColumnInfo`1">
            <summary>
            Information required for one column when mapping between object and file rows.
            </summary>
            <typeparam name="TTarget">The target mapping type for a row.</typeparam>
        </member>
        <member name="P:Npoi.Mapper.ColumnInfo`1.HeaderValue">
            <summary>
            Value for the column header.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.ColumnInfo`1.Resolver">
            <summary>
            The column resolver.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.ColumnInfo`1.Attribute">
            <summary>
            The mapped property information.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.ColumnInfo`1.LastNonBlankValue">
            <summary>
            The last non-blank value.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.ColumnInfo`1.HeaderFormat">
            <summary>
            Get or set the header cell format.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.ColumnInfo`1.DataFormat">
            <summary>
            Get or set the data cell format.
            </summary>
        </member>
        <member name="M:Npoi.Mapper.ColumnInfo`1.#ctor(System.Object,System.String,System.Reflection.PropertyInfo)">
            <summary>
            Initialize a new instance of <see cref="T:Npoi.Mapper.ColumnInfo`1"/> class.
            </summary>
            <param name="headerValue">The header value</param>
            <param name="columnName">The column name.</param>
            <param name="pi">The mapped PropertyInfo.</param>
        </member>
        <member name="M:Npoi.Mapper.ColumnInfo`1.#ctor(System.Object,System.Int32,System.Reflection.PropertyInfo)">
            <summary>
            Initialize a new instance of <see cref="T:Npoi.Mapper.ColumnInfo`1"/> class.
            </summary>
            <param name="headerValue">The header value</param>
            <param name="columnIndex">The column index.</param>
            <param name="pi">The mapped PropertyInfo.</param>
        </member>
        <member name="M:Npoi.Mapper.ColumnInfo`1.#ctor(System.Object,Npoi.Mapper.Attributes.ColumnAttribute)">
            <summary>
            Initialize a new instance of <see cref="T:Npoi.Mapper.ColumnInfo`1"/> class.
            </summary>
            <param name="headerValue">The header value</param>
            <param name="attribute">Mapped <c>PropertyMeta</c> object.</param>
        </member>
        <member name="M:Npoi.Mapper.ColumnInfo`1.RefreshAndGetValue(System.Object)">
            <summary>
            Refresh LastNonBlankValue property and get value according UseLastNonBlankValue property.
            </summary>
            <param name="value">The current cell value.</param>
            <returns>
            Same object as input parameter if UseLastNonBlankValue is false;
            otherwise return LastNonBlankValue.
            </returns>
        </member>
        <member name="M:Npoi.Mapper.ColumnInfo`1.SetCellStyle(NPOI.SS.UserModel.ICell,System.Boolean)">
            <summary>
            Set style for the cell.
            </summary>
            <param name="cell">The cell to be set.</param>
            <param name="isHeader">If <c>true</c>, use HeaderFormat; otherwise use DataFormat.</param>
        </member>
        <member name="T:Npoi.Mapper.CsvHelper">
             <summary>
             Provide helper methods for import and export CSV file.
             Example:
               CsvExport myExport = new CsvHelper();
            
               myExport.AddRow();
               myExport["Region"] = "New York, USA";
               myExport["Sales"] = 100000;
               myExport["Date Opened"] = new DateTime(2003, 12, 31);
            
               myExport.AddRow();
               myExport["Region"] = "Sydney \"in\" Australia";
               myExport["Sales"] = 50000;
               myExport["Date Opened"] = new DateTime(2005, 1, 1, 9, 30, 0);
            
             Then you can do any of the following three output options:
               string myCsv = myExport.Export();
               myExport.ExportToFile("Somefile.csv");
               byte[] myCsvData = myExport.ExportToBytes();
             </summary>
        </member>
        <member name="F:Npoi.Mapper.CsvHelper._fields">
            <summary>
            To keep the ordered list of column names
            </summary>
        </member>
        <member name="F:Npoi.Mapper.CsvHelper._rows">
            <summary>
            The list of rows
            </summary>
        </member>
        <member name="P:Npoi.Mapper.CsvHelper.CurrentRow">
            <summary>
            The current row
            </summary>
        </member>
        <member name="P:Npoi.Mapper.CsvHelper.Item(System.String)">
            <summary>
            Set a value on this column
            </summary>
        </member>
        <member name="M:Npoi.Mapper.CsvHelper.AddRow">
            <summary>
            Call this before setting any fields on a row
            </summary>
        </member>
        <member name="M:Npoi.Mapper.CsvHelper.AddRows``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a list of typed objects, maps object properties to CsvFields
            </summary>
        </member>
        <member name="M:Npoi.Mapper.CsvHelper.MakeValueCsvFriendly(System.Object)">
            <summary>
            Converts a value to how it should output in a csv file
            If it has a comma, it needs surrounding with double quotes
            Eg Sydney, Australia -> "Sydney, Australia"
            Also if it contains any double quotes ("), then they need to be replaced with quad quotes[sic] ("")
            Eg "Dangerous Dan" McGrew -> """Dangerous Dan"" McGrew"
            </summary>
        </member>
        <member name="M:Npoi.Mapper.CsvHelper.ExportToLines">
            <summary>
            Outputs all rows as a CSV, returning one string at a time
            </summary>
        </member>
        <member name="M:Npoi.Mapper.CsvHelper.Export">
            <summary>
            Output all rows as a CSV returning a string
            </summary>
        </member>
        <member name="M:Npoi.Mapper.CsvHelper.ExportToFile(System.String)">
            <summary>
            Exports to a file
            </summary>
        </member>
        <member name="M:Npoi.Mapper.CsvHelper.ExportToBytes">
            <summary>
            Exports as raw UTF8 bytes
            </summary>
        </member>
        <member name="T:Npoi.Mapper.IColumnResolver`1">
            <summary>
            Base contract for column resolver.
            Implement this interface to resolve header and cells for column(s).
            </summary>
            <typeparam name="TTarget">The target mapping type for a row.</typeparam>
        </member>
        <member name="M:Npoi.Mapper.IColumnResolver`1.IsColumnMapped(System.Object@,System.Int32)">
            <summary>
            Determine whether the given column mapped by this resolver or not.
            </summary>
            <param name="headerValue">
            Header value that is either string or double.
            Resolved value can be assigned back so that it can be used as HeaderValue property
            of columnInfo in TryResolveCell method.
            </param>
            <param name="index">Column index</param>
            <returns>True if can map header and column; otherwise false.</returns>
        </member>
        <member name="M:Npoi.Mapper.IColumnResolver`1.TryTakeCell(Npoi.Mapper.ColumnInfo{`0},System.Object,`0)">
            <summary>
            Try take cell value for the given column when import data from file.
            </summary>
            <param name="columnInfo">The column info.</param>
            <param name="cellValue">The cell value object that is either string or double.</param>
            <param name="target">The target object of the mapped type.</param>
            <returns>True if cell was resolved without error; otherwise false.</returns>
        </member>
        <member name="M:Npoi.Mapper.IColumnResolver`1.TryPutCell(Npoi.Mapper.ColumnInfo{`0},System.Object@,`0)">
            <summary>
            Try set value to cell for the given column when export object to file.
            </summary>
            <param name="columnInfo">The column info.</param>
            <param name="cellValue">The value that will be set to cell.</param>
            <param name="source">The object of the mapped type.</param>
            <returns>True if cell was resolved without error; otherwise false.</returns>
        </member>
        <member name="T:Npoi.Mapper.MapHelper">
            <summary>
            Provide static supportive functionalities for <see cref="T:Npoi.Mapper.Mapper"/> class.
            </summary>
        </member>
        <member name="F:Npoi.Mapper.MapHelper.NumericTypes">
            <summary>
            Collection of numeric types.
            </summary>
        </member>
        <member name="F:Npoi.Mapper.MapHelper.BuiltinStyles">
            <summary>
            Store cached built-in styles to avoid create new ICellStyle for each cell.
            </summary>
        </member>
        <member name="F:Npoi.Mapper.MapHelper.CustomStyles">
            <summary>
            Store cached custom styles to avoid create new ICellStyle for each customized cell.
            </summary>
        </member>
        <member name="M:Npoi.Mapper.MapHelper.LoadAttributes``1(System.Collections.Generic.Dictionary{System.Reflection.PropertyInfo,Npoi.Mapper.Attributes.ColumnAttribute})">
            <summary>
            Load attributes to a dictionary.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="attributes">Container to hold loaded attributes.</param>
        </member>
        <member name="M:Npoi.Mapper.MapHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Extension for <see cref="T:System.Collections.Generic.IEnumerable`1"/> object to handle each item.
            </summary>
            <typeparam name="T">The item type.</typeparam>
            <param name="sequence">The enumerable sequence.</param>
            <param name="action">Action to apply to each item.</param>
        </member>
        <member name="M:Npoi.Mapper.MapHelper.ClearCache">
            <summary>
            Clear cached data for cell styles and tracked column info.
            </summary>
        </member>
        <member name="M:Npoi.Mapper.MapHelper.IsNumeric(System.Type)">
            <summary>
            Check if the given type is a numeric type.
            </summary>
            <param name="type">The type to be checked.</param>
            <returns><c>true</c> if it's numeric; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Npoi.Mapper.MapHelper.LoadDataFormats``1(NPOI.SS.UserModel.IRow,System.Collections.Generic.IEnumerable{Npoi.Mapper.ColumnInfo{``0}})">
            <summary>
            Load cell data format by a specified row.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="dataRow">The row to load format from.</param>
            <param name="columns">The column collection to load formats into.</param>
        </member>
        <member name="M:Npoi.Mapper.MapHelper.GetCellStyle(NPOI.SS.UserModel.ICell,System.String,System.Int16,System.Nullable{System.Int16})">
            <summary>
            Get the cell style.
            </summary>
            <param name="cell">The cell.</param>
            <param name="customFormat">The custom format string.</param>
            <param name="builtinFormat">The built-in format number.</param>
            <param name="columnFormat">The default column format number.</param>
            <returns><c>ICellStyle</c> object for the given cell.</returns>
        </member>
        <member name="M:Npoi.Mapper.MapHelper.GetCellType(NPOI.SS.UserModel.ICell)">
            <summary>
            Get underline cell type if the cell is in formula.
            </summary>
            <param name="cell">The cell.</param>
            <returns>The underline cell type.</returns>
        </member>
        <member name="M:Npoi.Mapper.MapHelper.TryGetCellValue(NPOI.SS.UserModel.ICell,System.Type,System.Object@)">
            <summary>
            Try get cell value.
            </summary>
            <param name="cell">The cell to retrieve value.</param>
            <param name="targetType">Type of target property.</param>
            <param name="value">The returned value for cell.</param>
            <returns><c>true</c> if get value successfully; otherwise false.</returns>
        </member>
        <member name="M:Npoi.Mapper.MapHelper.GetPropertyInfoByExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get mapped <c>PropertyInfo</c> by property selector expression.
            </summary>
            <typeparam name="T">The object type that property belongs to.</typeparam>
            <param name="propertySelector">The property selector expression.</param>
            <returns>The mapped <c>PropertyInfo</c> object.</returns>
        </member>
        <member name="M:Npoi.Mapper.MapHelper.GetRefinedName(System.String,System.Char[],System.Char[])">
            <summary>
            Get refined name by removing specified chars and truncating by specified chars.
            </summary>
            <param name="name">The name to be refined.</param>
            <param name="ignoringChars">Chars will be removed from the name string.</param>
            <param name="truncatingChars">Chars used truncate the name string.</param>
            <returns>Refined name string.</returns>
        </member>
        <member name="T:Npoi.Mapper.Mapper">
            <summary>
            Map object properties with Excel columns for importing from and exporting to file.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Mapper.TrackedColumns">
            <summary>
            Cache the tracked <see cref="T:Npoi.Mapper.ColumnInfo`1"/> objects by sheet name and target type.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Mapper.Objects">
            <summary>
            Sheet name map to tracked objects in dictionary with row number as key.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Mapper.DefaultResolverType">
            <summary>
            Type of class that implemented <see cref="T:Npoi.Mapper.IColumnResolver`1"/> to handle unrecognized/ unmapped columns.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Mapper.Workbook">
            <summary>
            The Excel workbook.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Mapper.IgnoredNameChars">
            <summary>
            When map column, chars in this array will be removed from column header.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Mapper.TruncateNameFrom">
            <summary>
            When map column, column name will be truncated from any of chars in this array.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Mapper.TrackObjects">
            <summary>
            Whether to track objects read from the Excel file. Default is true.
            If object tracking is enabled, the <see cref="T:Npoi.Mapper.Mapper"/> object keeps track of objects it yields through the Take() methods.
            You can then modify these objects and save them back to an Excel file without having to specify the list of objects to save.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Mapper.HasHeader">
            <summary>
            Whether to take the first row as column header. Default is true.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Mapper.HeaderRowIndex">
            <summary>
            Set a zero-based row index for header. It will be auto-detected if not set.
            </summary>
        </member>
        <member name="M:Npoi.Mapper.Mapper.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Npoi.Mapper.Mapper"/> class.
            </summary>
        </member>
        <member name="M:Npoi.Mapper.Mapper.#ctor(System.IO.Stream)">
            <summary>
            Initialize a new instance of <see cref="T:Npoi.Mapper.Mapper"/> class with stream to read workbook.
            </summary>
            <param name="stream">The input Excel(XLS, XLSX) file stream</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.#ctor(NPOI.SS.UserModel.IWorkbook)">
            <summary>
            Initialize a new instance of <see cref="T:Npoi.Mapper.Mapper"/> class with a workbook.
            </summary>
            <param name="workbook">The input IWorkbook object.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Npoi.Mapper.Mapper"/> class with file path to read workbook.
            </summary>
            <param name="filePath">The path of Excel file.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Map``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Type)">
            <summary>
            Map property to a column by specified column name.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="columnName">The column name.</param>
            <param name="propertySelector">Property selector.</param>
            <param name="resolverType">
            The type of custom header and cell resolver that derived from <see cref="T:Npoi.Mapper.IColumnResolver`1"/>.
            </param>
            <returns>The mapper object.</returns>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Map``1(System.UInt16,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Type)">
            <summary>
            Map property to a column by specified column index(zero-based).
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="columnIndex">The column index.</param>
            <param name="propertySelector">Property selector.</param>
            <param name="resolverType">
            The type of custom header and cell resolver that derived from <see cref="T:Npoi.Mapper.IColumnResolver`1"/>.
            </param>
            <returns>The mapper object.</returns>
        </member>
        <member name="M:Npoi.Mapper.Mapper.UseLastNonBlankValue``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specify to use last non-blank value from above cell for a property.
            Typically to address the blank cell issue in merged cells.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="propertySelector">Property selector.</param>
            <returns>The mapper object.</returns>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Ignore``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specify to ignore a property. Ignored property will not be mapped for import and export.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="propertySelector">Property selector.</param>
            <returns>The mapper object.</returns>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Format``1(System.Int16,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specify the built-in format.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="builtinFormat">The built-in format, see https://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/BuiltinFormats.html for possible values.</param>
            <param name="propertySelector">Property selector.</param>
            <returns>The mapper object.</returns>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Format``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specify the custom format.
            </summary>
            <typeparam name="T">The target object type.</typeparam>
            <param name="customFormat">The custom format, see https://support.office.com/en-nz/article/Create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4 for the syntax.</param>
            <param name="propertySelector">Property selector.</param>
            <returns>The mapper object.</returns>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Take``1(System.Int32,System.Int32,System.Func{``0})">
            <summary>
            Get objects of target type by converting rows in the sheet with specified index (zero based).
            </summary>
            <typeparam name="T">Target object type</typeparam>
            <param name="sheetIndex">The sheet index; default is 0.</param>
            <param name="maxErrorRows">The maximum error rows before stop reading; default is 10.</param>
            <param name="objectInitializer">Factory method to create a new target object.</param>
            <returns>Objects of target type</returns>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Take``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            Get objects of target type by converting rows in the sheet with specified name.
            </summary>
            <typeparam name="T">Target object type</typeparam>
            <param name="sheetName">The sheet name</param>
            <param name="maxErrorRows">The maximum error rows before stopping read; default is 10.</param>
            <param name="objectInitializer">Factory method to create a new target object.</param>
            <returns>Objects of target type</returns>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Put``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            Put objects in the sheet with specified name.
            </summary>
            <typeparam name="T">Target object type</typeparam>
            <param name="objects">The objects to save.</param>
            <param name="sheetName">The sheet name</param>
            <param name="overwrite"><c>true</c> to overwrite existing rows; otherwise append.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Put``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
            Put objects in the sheet with specified zero-based index.
            </summary>
            <typeparam name="T">Target object type</typeparam>
            <param name="objects">The objects to save.</param>
            <param name="sheetIndex">The sheet index, default is 0.</param>
            <param name="overwrite"><c>true</c> to overwrite existing rows; otherwise append.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Save(System.String)">
            <summary>
            Saves the current workbook to specified file.
            </summary>
            <param name="path">The path to the Excel file.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Save(System.IO.Stream)">
            <summary>
            Saves the current workbook to specified stream.
            </summary>
            <param name="stream">The stream to save the workbook.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Save``1(System.String,System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the specified objects to the specified Excel file.
            </summary>
            <typeparam name="T">The type of objects to save.</typeparam>
            <param name="path">The path to the Excel file.</param>
            <param name="objects">The objects to save.</param>
            <param name="sheetName">Name of the sheet.</param>
            <param name="overwrite">If file exists, pass <c>true</c> to overwrite existing file; <c>false</c> to merge.</param>
            <param name="xlsx">if <c>true</c> saves in .xlsx format; otherwise, saves in .xls format.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Save``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Saves the specified objects to the specified Excel file.
            </summary>
            <typeparam name="T">The type of objects to save.</typeparam>
            <param name="path">The path to the Excel file.</param>
            <param name="objects">The objects to save.</param>
            <param name="sheetIndex">Index of the sheet.</param>
            <param name="overwrite">If file exists, pass <c>true</c> to overwrite existing file; <c>false</c> to merge.</param>
            <param name="xlsx">if <c>true</c> saves in .xlsx format; otherwise, saves in .xls format.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Save``1(System.IO.Stream,System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the specified objects to the specified stream.
            </summary>
            <typeparam name="T">The type of objects to save.</typeparam>
            <param name="stream">The stream to write the objects to.</param>
            <param name="objects">The objects to save.</param>
            <param name="sheetName">Name of the sheet.</param>
            <param name="overwrite"><c>true</c> to overwrite existing content; <c>false</c> to merge.</param>
            <param name="xlsx">if set to <c>true</c> saves in .xlsx format; otherwise, saves in .xls format.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Save``1(System.IO.Stream,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Saves the specified objects to the specified stream.
            </summary>
            <typeparam name="T">The type of objects to save.</typeparam>
            <param name="stream">The stream to write the objects to.</param>
            <param name="objects">The objects to save.</param>
            <param name="sheetIndex">Index of the sheet.</param>
            <param name="overwrite"><c>true</c> to overwrite existing content; <c>false</c> to merge.</param>
            <param name="xlsx">if set to <c>true</c> saves in .xlsx format; otherwise, saves in .xls format.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Save``1(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves tracked objects to the specified Excel file.
            </summary>
            <typeparam name="T">The type of objects to save.</typeparam>
            <param name="path">The path to the Excel file.</param>
            <param name="sheetName">Name of the sheet.</param>
            <param name="overwrite">If file exists, pass <c>true</c> to overwrite existing file; <c>false</c> to merge.</param>
            <param name="xlsx">if <c>true</c> saves in .xlsx format; otherwise, saves in .xls format.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Save``1(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Saves tracked objects to the specified Excel file.
            </summary>
            <typeparam name="T">The type of objects to save.</typeparam>
            <param name="path">The path to the Excel file.</param>
            <param name="sheetIndex">Index of the sheet.</param>
            <param name="xlsx">if <c>true</c> saves in .xlsx format; otherwise, saves in .xls format.</param>
            <param name="overwrite">If file exists, pass <c>true</c> to overwrite existing file; <c>false</c> to merge.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Save``1(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves tracked objects to the specified stream.
            </summary>
            <typeparam name="T">The type of objects to save.</typeparam>
            <param name="stream">The stream to write the objects to.</param>
            <param name="sheetName">Name of the sheet.</param>
            <param name="overwrite"><c>true</c> to overwrite existing content; <c>false</c> to merge.</param>
            <param name="xlsx">if <c>true</c> saves in .xlsx format; otherwise, saves in .xls format.</param>
        </member>
        <member name="M:Npoi.Mapper.Mapper.Save``1(System.IO.Stream,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Saves tracked objects to the specified stream.
            </summary>
            <typeparam name="T">The type of objects to save.</typeparam>
            <param name="stream">The stream to write the objects to.</param>
            <param name="sheetIndex">Index of the sheet.</param>
            <param name="overwrite"><c>true</c> to overwrite existing content; <c>false</c> to merge.</param>
            <param name="xlsx">if set to <c>true</c> saves in .xlsx format; otherwise, saves in .xls format.</param>
        </member>
        <member name="T:Npoi.Mapper.RowInfo`1">
            <summary>
            Information for one row that read from file.
            </summary>
            <typeparam name="TTarget">The target mapping type for a row.</typeparam>
        </member>
        <member name="P:Npoi.Mapper.RowInfo`1.RowNumber">
            <summary>
            Row number.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.RowInfo`1.Value">
            <summary>
            Constructed value object from the row.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.RowInfo`1.ErrorColumnIndex">
            <summary>
            Column index of the first error.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.RowInfo`1.ErrorMessage">
            <summary>
            Error message for the first error.
            </summary>
        </member>
        <member name="M:Npoi.Mapper.RowInfo`1.#ctor(System.Int32,`0,System.Int32,System.String)">
            <summary>
            Initialize a new RowData object.
            </summary>
            <param name="rowNumber">The row number</param>
            <param name="value">Constructed value object from the row</param>
            <param name="errorColumnIndex">Column index of the first error cell</param>
            <param name="errorMessage">The error message</param>
        </member>
        <member name="T:Npoi.Mapper.Attributes.ColumnAttribute">
            <summary>
            Specifies attributes for a property that is going to map to a column.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Attributes.ColumnAttribute.Index">
            <summary>
            Column index.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Attributes.ColumnAttribute.Name">
            <summary>
            Column name.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Attributes.ColumnAttribute.Property">
            <summary>
            Mapped property for this column.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Attributes.ColumnAttribute.ResolverType">
            <summary>
            The type of class that is implemented <see cref="T:Npoi.Mapper.IColumnResolver`1"/> interface.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Attributes.ColumnAttribute.UseLastNonBlankValue">
            <summary>
            Indicate whether to use the last non-blank value.
            Typically handle the blank error in merged cells.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Attributes.ColumnAttribute.Ignored">
            <summary>
            Indicate whether to ignore the property.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Attributes.ColumnAttribute.BuiltinFormat">
            <summary>
            Gets or sets the built-in format, see https://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/BuiltinFormats.html for possible values.
            </summary>
        </member>
        <member name="P:Npoi.Mapper.Attributes.ColumnAttribute.CustomFormat">
            <summary>
            Gets or sets the custom format, see https://support.office.com/en-nz/article/Create-or-delete-a-custom-number-format-78f2a361-936b-4c03-8772-09fab54be7f4 for the syntax.
            </summary>
        </member>
        <member name="M:Npoi.Mapper.Attributes.ColumnAttribute.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Npoi.Mapper.Attributes.ColumnAttribute"/> class.
            </summary>
        </member>
        <member name="M:Npoi.Mapper.Attributes.ColumnAttribute.#ctor(System.UInt16)">
            <summary>
            Initialize a new instance of <see cref="T:Npoi.Mapper.Attributes.ColumnAttribute"/> class.
            </summary>
            <param name="index">The index of the column.</param>
        </member>
        <member name="M:Npoi.Mapper.Attributes.ColumnAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Npoi.Mapper.Attributes.ColumnAttribute"/> class.
            </summary>
            <param name="name">The name of the column.</param>
        </member>
        <member name="M:Npoi.Mapper.Attributes.ColumnAttribute.Clone">
            <summary>
            Get a member wise clone of this object.
            </summary>
            <returns>The member wise clone.</returns>
        </member>
        <member name="M:Npoi.Mapper.Attributes.ColumnAttribute.Clone(System.Int32)">
            <summary>
            Get a member wise clone of this object with given index.
            </summary>
            <param name="index">The index of column.</param>
            <returns>The member wise clone with specified index.</returns>
        </member>
        <member name="M:Npoi.Mapper.Attributes.ColumnAttribute.MergeFrom(Npoi.Mapper.Attributes.ColumnAttribute,System.Boolean)">
            <summary>
            Merge properties from a source <see cref="T:Npoi.Mapper.Attributes.ColumnAttribute"/> object.
            All properties will be updated from source's specified properties.
            </summary>
            <param name="source">The object to merge from.</param>
            <param name="overwrite">
            Whether or not to overwrite specified properties from source if source's properties are specified.
            Note that Index and Name are considered together as one key property.
            </param>
        </member>
        <member name="M:Npoi.Mapper.Attributes.ColumnAttribute.MergeTo(System.Collections.Generic.Dictionary{System.Reflection.PropertyInfo,Npoi.Mapper.Attributes.ColumnAttribute},System.Boolean)">
            <summary>
            Merge properties to a attribute dictionary.
            </summary>
            <param name="attributes">The dictionary to be merged into.</param>
            <param name="overwrite">
            Whether or not to overwrite specified properties to existed object if that object's properties are specified.
            Note that Index and Name are considered together as one key property.
            </param>
        </member>
        <member name="T:Npoi.Mapper.Attributes.IgnoreAttribute">
            <summary>
            Specifies to ignore a property for mapping.
            </summary>
        </member>
        <member name="T:Npoi.Mapper.Attributes.UseLastNonBlankValueAttribute">
            <summary>
            Specifies to use the last non-blank value when reading from cells for this property.
            Typically handle the blank error in merged cells.
            </summary>
        </member>
    </members>
</doc>
